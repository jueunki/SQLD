


***데이터베이스

모델 : 일정한 표기법에 의해 표현해 놓은 모형
모델링 : 현실 세계를 반영한 모델을 단순화하여 표현한 것

모델링이 갖추어야 할 조건 : 
* 현실세계를 반영
* 단순화하여 표현
* 관리하고자 하는 데이터를 모델로 설계

모델링 특징 : 현실세계를 추상화, 단순화, 명확화하기 윟 일정한 표기법에 의해 표현하는 기법
* 추상화 : 현실세계를 일정한 형식으로 표현/아이디어나 개념들을 간략하게 표현하는 과정 
* 단순화 : 복잡한 현실세계를 정해진 표기법으로 단순하고 쉽게 표현
* 명확화 : 불분명함 제거, 명확히 해석할 수 있도록 기술

모델링 관점 : 
* 데이터 관점 : 데이터 위주의 모델링/어떤 데이터들이 업무와 얽혀있는지,데이터간 관계에대해 
* 프로세스 관점 : 프로세스 위주의 모델링/실제 처리하고있는일, 앞으로 처리해야 할 일은 무엇인지
* 데이터와 프로세스의 상관 관점 : 데이터와 프로세스의 관계를 위주로 한 모델링/프로세스의 흐름에따라 데이터가 받는 영향을 모델링

모델링의 세 가지 단계 : 개노무라고 외우라고 했던사람 기억남/ 개념 - 논리 - 물리***
* 개념적 데이터 모델링 : 업무중심적, 포괄적 수준의 모델링이 진행됨
* 논리적 데이터 모델링 : 데이터베이스 모델에 대한 Key, 속성, 관계 등을 모두 표현하는 단계
* 물리적 데이터 모델링 : 실제 데이터베이스로 구현할 수 있도록 성능, 가용성 등의 물리적인 성격을 고려 모델을 표현하는 단계

ANSI-SPARC 아키텍처 : 
3단계 구조로 스키마를 나눈다. 
분리목적 - 사용자들의 관점과 실제로 표현되는 물리적 방식을 분리하기위함
존재목적 - 사용자에게 데이터를 보여줄 수 있는 뷰를 제공				 

DBA - 어플리케이션에 영향을 주지 않고 데이터베이스의 구조를 변경할 수  있어야 독립성이 보장된다고 할 수 있다.

3단계 스키마 구조 : 
* 외부 스키마 : 사용자의 관점 - VIEW단계로 여러개의 사용자 관점으로 구성되는것||각 사용자가 보는 데이터베이스의 스키마를 정의(VIEW단계)
* 개념 스키마 : 통합된 관점 - 모든 사용자 관점을 통합한 조직 전체 관점의 통합적인 표현||모든 사용자가 보는 데이터베이스의 스키마를 통합하여 전체 데이터베이스를 나타낸다/DB에 저장되는 데이터들을 표현, 데이터들 간의 관계를 나타낸다.
* 내부 스키마 : 물리적인 관점 - 물리적 저장구조||실질적 데이터의 저장구조, 컬럼 정의, 인덱스 등이 포함됨

* 이런 느낌.
" USER  <----->  APPLICATION  <-----> DATABASE "

3단계  스키마 구조가 보장하는 독립성 :
* 논리적 독립성 : 개념 스키마가 변경되어도 외부 스키마는 영향받지 않는다.
* 물리적 독립성 : 내부 스키마가 변경되어도 외부/개념 스키마는 영향받지 않는다.


***ERD캡쳐 이미지 참고
One
일대일 혹은 일대다 관계이다. 주로 하나의 외래키가 걸린 관계라도 보면 된다.
Many
다대다 관계이다. 중계 테이블을 통하여 여러개의 데이터를 바라보고 있을 때 사용한다.
One (and only one)
위의 조건과 동일하게 일대일 관계이나, 하나의 row 끼리만 연결된 데이터이다.
Zero or one
일대일 혹은 일대다 관계를 가지고 있으나, 필수 조건이 아님을 의미한다.
One or many
일대일 혹은 다대다 관계를 가지고 있음을 의미한다.
관계를 가지고 있으나, 참조되는 row 값들이 불명확함을 의미한다.
Zero or many
참조하는 테이블과의 관계가 불명확한 경우이다.
장바구니처럼 row 생성값이 없을수도, 하나일수도, 여러개일 수도 있는 경우이다.

ERD 작성순서 : 
* 엔터티를 도츨하고 그린다
* 엔터티를 적절하게 배치
* 엔터티 간의 관계를 설정
* 관계명을 기입
* 관계의 참여도 기입
* 관계의 필수/선택 여부 기입

시스템 분석을 위한 모델링의 기능 : 
* 시스템이 향후 변화하고자 하는 모습으로 가시화
* 시스템을 구축하는 과정에서 결정한것을 문서화
* 시스템을 구축하는 구조화된 틀을 제공
* 시스템의 구조와 행동을 명세화

ENTITY : 식별이 가능한 객체/업무에서 쓰이는 데이터를 용도별로 분류한 그룹

***TIP
* 엔터티 : Table
* 인스턴스 : Row
* 속성 : Column

엔터티의 특징 : 
* 업무에 쓰이는 정보여야한다.
* 유니크함을 보장할 수 있는 식별자가 있어야한다.
* 2개 이상의 인스턴스를 가지고 있어야 한다.
* 속성을 반드시 가지고있어야 한다.
* 다른 앤터티와 1개 이상의 관계를 가지고 있어야한다.

엔터티의 분류 : 
** 유형/무형 
유형 - 물리적 형태 존재	ex. 상품, 회원 
개념 - 물리적 형태 없음	ex. 부서, 학과
사건 - 행위를 함으로 생성	ex. 주문, 이벤트 응모

** 발생시점
기본 - 독립적 생성/자식엔터티를 가질수있음	ex. 상품, 회원 
중심 - 기본 엔터티로부터 파생			ex. 주문
행위 - 2개 이상의 엔터티로부터 파생		ex. 주문내역, 이벤트 응모이력

*****
기본엔터티는 독립적으로 생성되어 자신만의 주식별자를 가지며 다른 엔터티의 부모역할을 하게된다.
중심엔터티는 기본엔터티로부터 발생되어 많은 데이터를 갖게되며 행위엔터티를 생성한다.
행위엔터티는 두개 이상의 부모 엔터티로부터 파생되고 보통 설계 초기 단계보다는 상세 설계단계에서 많이 도출된다.

***엔터티의 이름을 정할 때 주의점
* 엔터티명은 분명해야한다
* 업무에서 실제로 쓰이는 용어 사용
* 한글은 약어를 사용하지 않고, 영문은 대문자로 표기
* 단수 명사로 표현하고 띄어쓰기는 하지않음
* 다른 엔터티와 의미상으로 중복될 수 없음(주문,결제 엔터티는 중복될 수 있음)
* 해당 엔터티가 갖고있는 데이터가 무엇인지 명확하게 표현

Attribute(속성) : 사물이나 개념의 특징을 설명해줄 수 있는 항목들/엔터티의 특징을 나타내는 최소의 데이터 단위/의미상 더 이상 쪼개지지 않는 레벨/프로세스에 필요한 항목

속성값 : 하나의 속성이 여러 개의 속성값을 갖는 경우 별도의 엔터티로 분리하는 것이 바람직하다.

ex. 이름			생년월일			직업
   주은기			1995.01.13			배우,작곡가,가수
								î
								여러개면 별도의 엔터티로 분리시킨다.

엔터티, 인스턴스, 속성, 속성값의 관계 : 엔터티 > 인스턴스 > 속성
* 한 개의 엔터티는 두 개 이상의 인스턴스를 갖는다
* 한 개의 인스턴스는 두 개 이상의 속성을 갖는다
* 한 개의 속성은 하나의 속성값을 갖는다

***
PK 		: 유니크함을 부여하는 속성
FK		: 다른 엔터티와 관계를 맺게해주는 매게체 역할을 하는 속성/PK값과 일치하거나, NULL값을 가질수도있다
일반속성	: PK,FK를 제외한 나머지 속성

* 구성방식에 따른 분류 : PK속성 - FK속성 - 일반속성
* 특성에 따른 분류 : 기본속성 - 설계속성 - 파생속성

속성은 특성에 따라 혹은 구성방식에 따라 분류할 수 있는데, 데이터 조회시 빠른 성능을 보장하기 위해 
본래의 속성값을 계산하여 따로 저장할 수 있도록 만든 속성을 파생속성이라고 하며, 이것은 특성에 따른 분류 중 하나에 해당한다.

** 도메인 : 속성이 가질 수 있는 속성값의 범위/ 엔터티를 정의 할 때 데이터 타입과 크기로 나타낼 수 있다.

** 속성사전 : 엔터티의 속성명을 정의할 때 명확한 의미의 이름을 부여하고 다른 엔터티와의 혼란을 예방하기 위해 이용하는것.
		같은 의미를 가진 데이터가 각각 다른 명으로 정의된다면 혼란을 초례할 수 있기에 방지차원으로 각 엔터티에 공통된 룰로 적용하는것이 바람직함.

관계 : 엔터티와 엔터티와의 관계를 의미			ex. 고객 - 주문한다 - 메뉴
* 존재관계 : 연관성 있는 관계				ex. 학생 - 소속된다 - 학과
* 행위관계 : 특정 행위를 함으로써 연관성이 생기는 관계	ex. 학생 - 출석한다 - 출석부

** 관계의 표기법에 표기하는 항목 : 관계명, 관계차수, 관계선택사양
* 관계명	:엔터티와 엔터티가 어떠한 관계를 맺고있는지 나타내는 문장/엔터티의 관점에서 관계명을 하나씩 가지기 때문에 모든관계는 두개의 관계명을 가지고있다./반드시 명확한 문장으로 표현/현재형이어야한다.
		ex. 학과/포함한다 ------ 학생/소속된다
* 관계차수	: 각 엔터티에서 관계에 참여하는 수를 의미/ 1:1, 1:M, M:N 형식으로 구분
* 관계선택사양	: 필수적 관계, 선택적 관계로 나누어짐/
		ex. 주문/선택한다 ----- 주문상품/선택된다 (필수)
		    학생/출석한다 ----- 출석부/등록된다    (선택 : 출석은 학생의 선택이기 때문)





